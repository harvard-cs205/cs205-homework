# Your answers here.

1) 255 seconds. There are 256 totals that we must sum together. Getting down to 255 numbers takes 1 second, since we must sum the first two numbers. Following this pattern, it takes 255 seconds to get down to 1 number, which is the sum of the totals of the 256 bags. This is effectively a running sum of the 256 totals we are given. There is no way to be faster than this because there is only one cashier, and only one operation (summing two numbers) can occur in a unit of time (1 second). To be faster, the cashier would either need to sum the two numbers in less than 1 second or perform multiple sums per second, both of which are impossible given the context of the problem.

2) 34 seconds. We now have 8 cashiers that can work concurrently to find the sum of the totals of the 256 bags. Give each cashier 32 bags. We found from problem 1 that a running sum takes a single cashier n-1 seconds to perform, where n is the number of bags for which they are finding the total sum. Therefore, in 31 seconds, the 256 totals gets reduced to 8 sums. Now, 4 pairs of cashiers can add their sums in 1 second, reducing the total number of sums to 4. To reduce this number to 2 sums, it takes 1 second. To reduce this down to 1 sum, it takes 1 second. Therefore, the total time is takes to sum the 256 totals with 8 cashiers is 34 seconds. This is significantly faster than the original cashier summing by herself.

3) 8 seconds. We can sum the totals using a divide and conquer approach. In the first iteration, we have 128 cashiers summing 128 pairs (the 256 totals has 128 pairs), and this takes 1 second. In the second iteration, 64 cashiers sum the 64 resulting pairs, which takes another second. Following this pattern, it takes 8 seconds to sum the 256 totals.

4) log_2 (N) seconds. Generalizing the strategy in question 3, summing the totals using divide and conquer effectively takes log base 2 of N operations since we can have an infinite number of cashiers reduce the number of totals by half in each iteration. Since each operation takes 1 second, this takes log_2 (N) seconds.

5) 16 seconds. In the first iteration, it takes 1 second to sum the 128 pairs, and 1 second to communicate the sum. In the second iteration, it takes 1 second to sum the 64 pairs, and 1 second to communicate. Following this pattern, it takes 16 seconds to sum the 256 totals. 

6)
Taking one bag at a time:
260 seconds. In the first iteration, we distribute two bags to two distinct cashiers (2 seconds). In the second iteration, we distribute two bags, and the first two cashiers communicate and sum their totals (2 seconds). In the third iteration, we distribute two more bags, and the third and fourth cashiers communicate and sum their totals (2 seconds). In the fourth iteration, we distribute two more bags, and the sum from the first and second cashiers gets commmunicated and summed with the sum from the third and fourth cashiers (2 seconds). Following this process, by the time we distribute the 255th and 256th bags, 256 seconds will have elapsed, and we will have summed the totals of the first 254 bags. It will take 4 more seconds to communicate and sum the last pair of bags (255 and 256), and communicate and sum that with the sum from the first 254 bags. Thus, it takes 256 + 4 = 260 seconds.

Taking two bags at a time:
133 seconds. We will begin an index on the cashiers that have a single number to communicate, where the index represents the seconds at which they received this number. We will begin this index at 2, since it takes 2 seconds for the first cashier to receive two bags and sum them. We then split the cashiers off by even and odd indices. With the exception of the cashiers with indices 2 and 3, we have only the even cashiers communicate and sum with even cashiers, and odd cashiers communicate and sum with odd cashiers. This will allow us to require only 5 more seconds after we distribute of the 255th and 256th bags. Thus, this process takes 128 + 5 = 133 seconds.

Master strategy:
23 seconds. If we are not fixed in the number of bags that we hand to a cashier in one second, then the best strategy would be as follows: In the first second, hand all the bags to a single cashier. In the second second, that cashier hands half of their bags to another cashier. In the third second, those cashiers hand half of their bags to two other cashiers. Continue this until each cashier involved has two bags each (overall, this takes 8 seconds). It takes 1 second to sum these 128 pairs. It takes two seconds to communicate and sum these 64 pairs. Following this pattern, we take 8 + 1 + 2*log_2(128) = 9 + 14 = 23 seconds.