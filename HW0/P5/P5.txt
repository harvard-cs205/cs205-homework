Note: I (minimally) collaborated with Taylor K. on parts 2/3 on this particular question. Specifically, he helped clarify the prompt of the question, as i had found parts of it to be initially a bit ambiguous. 

1. 255 seconds. It takes n-1 seconds to add up the totals of n bags by a single worker. Thus, 256-1 = 255 seconds.

2. 34 seconds. There are now 8 simultaneous workers counting bags. 256 / 8 = 32. Thus, each worker only needs to count 32 bags by themselves. Since everyone is counting at the same time and it is assumed each worker takes the same amount of time each to count, then we know it takes n-1 seconds to add up the totals of n bags per worker. So 32-1 equals 31 seconds per worker. We are now left with each worker, 8 in total, having a sum they have calculated. The 8 sums must now by combined into one single total, which can be done by each pair (4 in total) combining simultaneously, then each resulting pair combining together (2 in total), and finally the final pair (1 in total) combining together. That is 3 additional pairings at 1 second each, resulting in a total of 3 additional seconds for the 8 workers to communicate. So 31+3 = 34 seconds total.

3. 8 seconds. We now have an infinite supply of workers that can be used in this problem. Since the problem deals with adding two numbers together, we know that each worker (to be "working") needs at least 2 bags to count. Thus, we can take 256 / 2 = 128 workers. Thus, each worker has 2 bags to count, which happens simultaneously after 1 second. We are now left with 128 workers with 1 number each that we now have to combine. So 128 becomes 64 which becomes 32 which becomes 16 which becomes 8 which becomes 4 which becomes 2 which becomes 1. That is 7 additional seconds of counting that will take place. Thus 1+7 = 8 seconds total.

4. See P5.py code and P5.png for graph.
 
5. Accounting for communication between workers will take an additional 7 seconds, making the overall counting of 256 bags by 128 workers equal to 15 seconds. The first second of the process has no worker-worker communication, thus that step only takes one second. It is the following 7 out of the 8 total seconds that we now have an additional second added on to account for communication. Total time now equals 8+7 = 15 seconds. 

6. If my workers cannot start counting bags until all bags have been distributed, then, if i can only hand out one bag at a time, total time will take 256 bags = 256 seconds of handing out + 15 seconds (the original time it took 128 cashiers to verify the 256 bags) = 271 seconds. However, if my workers can count bags as i am distributing bags simultaneously, then it will take less time than that. For example lets say i will hand out bags to 128 workers again: at the beginning it takes one second to hand out a bag to a cashier, then it takes a 2nd second to hand that cashier a second bag, during the 3rd second i simultaneously hand out a bag to a second worker while the first worker counts his bags. During the 4th second i hand the second worker a bag while the first worker remains idle (nothing left to count). During the 5th second i hand a third worker a bag while the first worker remains idle and the second worker counts his bags. During the 6th second, the first two workers communicate their numbers and i hand a third worker a bag. during the 7th second i hand the third worker a second bag while the first two workers now add their two bags together (or similarly, per the clarification on slack/piazza - one worker gives the other his/her bag which takes one second and the calculation is instantaneous). This process continues… Being allowed to work simultaneously to my distribution means it will take less time than 271 seconds, but i have idle workers. Total time will take 256 - 15 = 241 seconds. (the simultaneous working is the 15 second overlap with my handing out of bags).

If i can now hand out two bags at a time, and counting cannot commence until all bags have been distributed, then total time equal 256 / 2 = 128 seconds + 15 = 143 seconds. If workers can count as i am handing out bags then the process is sped up and equals 256 / 2 = 128 seconds - 15 seconds = 113 seconds. Like the first scenario, in the first second i hand two bags to the first worker, during the 2nd second i hand two bags to a second worker while first worker counts their number. during the third second i hand two bags to a third worker while first worker is idle and second worker counts their bag. During fourth second first two workers communicate and third worker counts their bags while i hand a fourth worker a bag. 

To improve this process, i would try to minimize the bottleneck that exists here where i am the only distributor of bags. As you can see from my descriptions above, there are times where workers are idle because there is no one yet to interact with (i.e., not everyone has bags). Thus, to speed up this process i could hand 128 bags to the first worker in the 1st second and in the 2nd second i could hand 64 bags to a third worker while the 2nd worker could give 64 of his bags to a 4th worker, and in the 3rd second i could give 32 bags to a 5th worker, worker #1 could give 32 of his bags a 6th worker etc … This would continue until there are 128 workers with 2 bags each. Then 15 seconds of counting would commence. The time this would take would be 7 seconds of bag distribution + 15 seconds of counting among the 128 workers = 22 seconds. 