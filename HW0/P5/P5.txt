1.  When two bags are added together, we can think of them as forming a new bag with value equal to the original two bags combined, so it's just like adding numbers. There are 255 additions required to add all 256 bags. After one second, bags 1 and 2 have been added, and there are 255 bags left: bag (1 and 2), and bags 3 through 255. After two seconds, 254 bags remain. Similarly, after 255 additions, bags 1 through 255 will have been added with bag 256, and there is only one bag left. Since one cashier must perform all 255 additions, it will take them 255 seconds.

2.  There are still 255 additions to perform. Each round, a cashier can add two bags together, so each round, the eight cashiers can add a total of 16 bags. After 256/16=16 rounds, each cashier will have added 16*2=32 bags, and there will be 128 bags waiting to be added. After a further 128/16=8 rounds, there will be 64 bags left. Four rounds later, there will be 32 bags; two rounds after that, there will be 16 bags; one round later, there will be eight bags.

Now the cashiers cannot all work at the same time, so it takes one round to go from eight to four, one round to go from four to two, and one round to add the remaining two bags together. Thus, it takes 16+8+4+2+1+1+1+1=34 seconds total.

3.  Infinite cashiers can halve the number of bags every second, since bags can be paired off and each pair added together. It will therefore take log_2(256) = 8 seconds.

4.  As above, it will take log_2(N) seconds.

5.  I will refer to communicating a number as giving a bag, since in this problem, they're essentially the same thing. That is, adding the value of the pennies in two bags is no different than adding the pennies in the bags together and noting their value.
	 After the first round, there will be 128 numbers to be added. Half of the cashiers will then add their number to another cashier's number, and a cashier will take one second to communicate their number. Thus, when there are 128 numbers to be added, there will be an extra 128/2=64 seconds of time before the next round of adding can take place. It will still take eight rounds of just adding, but now there are an extra 64+32+16+4+2+1=119 seconds of overhead. The total time required is therefore 127 seconds, about eight times as slow as the case when communication was instant.

6.  For this problem, I assume that a cashier cannot both receive a bag and add two bags in one second. They cannot both add bags and give/take bags at once.

If the cashiers take one bag:

Here is an algorithm. Let's refer to two bags that have been added together as an n-bag. Thus, the goal is to have a 256-bag. The first cashier able to add two bags does (call him C_1), and whenever a cashier can give C_1 a two-bag, he does. Whenever two cashiers each have one bag and can combine their bags (one gives their bag to the other, then the bag is added), they do. The result: after eight seconds, C_1 has a 4-bag, one cashier has a 2-bag, and two other cashiers have one bag each. In every proceeding two-second interval, C_1 will add a 2-bag to his bag, two cashiers will combine their bags, and two cashiers will receive bags but not be able to combine them. After 256 seconds, C_1 will have a 252-bag, and it will take a further four seconds for him to get a 256-bag, for a total of 260 seconds, since he adds a 2-bag every two seconds. Finishing in 260 seconds is the best possible result, since once all 256 bags are handed out (in 256 seconds), it would, in any case, take a further four seconds for the last two bags to be combined and added to the total.

If the cashiers take two bags:

Each second, a cashier will get two bags, and the next second, he will, of course, add them. Thus, after two seconds, one cashier will have a 2-bag and one will have two 1-bags. Call the first cashier to receive bags C_1. Anytime he can take a 2-bag from another cashier, he does, then adds it to his other bag. Every second after three seconds (when C_1 has a 2-bag, one other cashier has a 2-bag, and a third cashier has two 1-bags), one 2-bag will be created, one cashier will get two 1-bags, and every two seconds, C_1 will add a 2-bag to his total. After n seconds (where n is odd), C_1 will have an (n-1)-bag. We can see that in this case, 2-bags will be created faster than C_1 can add them. After six seconds, C_1 will have a 2-bag and a 4-bag to add, but two cashiers will have 2-bags. Now, one of the cashiers with just a 2-bag can start taking 2-bags and adding them; call this cashier C_2. Each round, either C_1 or C_2 can take a 2-bag, so 2-bag production is now commensurate with 2-bag adding speed. Since C_2 has a 4-bag after eight seconds, and adds one 2-bag every two seconds thereafter, he will have a (n-4)-bag after n seconds (where n is even).

In summary: whenever a cashier is able to add two 1-bags, they will. The first cashier to add two 1-bags is C_1. Whenever C_1 can take and add a 2-bag, he does. If/when two cashiers have 2-bags and C_1 has his hands full, one of the two cashiers will take and add the other's 2-bag (this cashier is C_2). Whenever C_2 can take and add a 2-bag, he does. When there are no more 2-bags to take, C_1 and C_2 will finish adding their bags, then C_2 will give C_1 his bag and C_1 will add the two bags, finishing the process.

After 128 seconds, all the bags will have been handed out. C_1 will have a 126-bag and a 2-bag, C_2 will have a 124-bag, one cashier will have a 2-bag, and one will have two 1-bags. Seven seconds later, at 133 seconds, all bags will have been added according to the above algorithm. This may not be the best possible solution, since, in theory, the cashier receiving two 1-bags at 128 seconds could add them and give them to someone else by 130 seconds, with the process thus finishing at 131 seconds. However, it is, at worst, two seconds slower than the best possible algorithm.

Is there a better solution?

Here is a method that finishes in at most 39 seconds - not nearly as good as with no communication or bag-exchange overhead, but much better than 131 seconds. Hand each cashier 16 bags. The cashiers then add all the bags up. A cashier can add one bag every second, since they don't have to communicate with any other cashiers. One second after getting the bags, a cashier will have a 2-bag; after two seconds, a 3-bag; and a 16-bag after 15 seconds. Thus, the final cashier to get bags (they receive their bags after 16 seconds have passed) will finish adding after 31 seconds. Next, half the cashiers hand their bags to the other half and the bags are added in a process that takes two seconds. For example, after 33 seconds, eight cashiers will have 32-bags. Since the number of bags waiting to be added is halved every two seconds, it will take a further 2*log_2(16)=8 seconds after 31 seconds to add all the bags, for a total time of 39 seconds.

There is probably a better solution than this (the first cashiers to get their bags could start adding bags before all the cashiers are done, saving a few seconds), but it seems to me that this approach of striking a balance between giving small numbers of bags to lots of cashiers and giving large numbers of bags to only a few cashiers is a reasonable way to approach the problem.