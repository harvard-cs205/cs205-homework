# Your answers here.
#
1. 255s;

2. Each worker will now count only 256 / 8 = 31s for the first round, after which their are 8 numbers. Then, four of the workers can count the sum of these 8 numbers into 4 numbers using 1s. Similarly, two of the works can count the sum of these 4 numbers into 2 numbers using 1s. Finally, one of the workers will count the sum of these 2 numbers using 1s. Therefore, the total time used is (31 + 1 + 1 + 1) = 34s.

3. It will take log(256) / log(2) = 8 seconds.

4. It should take ceil(log(N) / log(2)) seconds.

5. We need to find a critical point where it is less efficient to count all these bags on one's own than to distribute 2^N bags to two cashiers. The derivation will be:

t1 = 2^N - 1 // count all these 2^N bags by one cashier
t2 = 2^(N-1) - 1 // count half of the bags by two cashiers
t3 = 1 + 1 // time cost to communicate the partial result and sum them

    t2 + t3 <= t1
->  2^(N-1) + 2 <= 2^N
->  2 <= 2^(N-1)
->  N >= 2

Therefore, a cashier should distribute his bags to another one until he has less or equal than 4 bags. Since there's a communication cost between each layer, it will take a total of 8 + (8 - 1) = 15s.

6.

6-a) If each cashier has 1 bag initially, then it takes log(256) / log(2) + 1 = 9s to distribute all these 256 bags to each cashier. Then it takes each pair of cashier 1s to hand his bag to his partner, which turns this problem as equivlant to 5). Then it will take another 15s to count the sum. Hence the total time will be 9 + 1 + 15 = 25s.

6-b) If each cashier has 2 bags initially, then it takes 8s to distribute all these 256 bags. The rest of the problem is equivalent to 5). Hence the total time will be 8 + 15 = 23s.

6-c) We need to find a critical point where it is less efficient to count all these bags on ones own than to distribute 2^N bags to two cashier. The derivation will be:

t1 = 2^N - 1 // count all these 2^N bags by one cashier
t2 = 2^(N-1) - 1 // count half of the bags by two cashiers
t3 = 1 // time cost to hand 2^(N-1) bags from one to another
t4 = 2 // time cost to communicate the partial result and sum them

    t2 + t3 + t4 <= t1
->  2^(N-1) - 1 + 1 + 2 <= 2^N - 1
->  3 <= 2^(N-1)
->  N >= 3

Therefore, if a cashier gets more than 2^(3-1) = 4 bags, then he should distribute the bags evenly to two cashier, thus the optimal number of bags for each cashier is 4. It will take 7 + 3 + 2 * log(64) / log(2) = 22s. 
