# Your answers here.

1. No matter the order in which the bags are summed, it will take the single
   cashier 255 seconds.

2. Now that there are eight cashiers, they can effectively sum 8 pairs of
   bags per second. This would work best if we gave each cashier 256/8 = 32 bags
   to sum. This will take them 31 seconds to sum these groups of bags, and now
   we have 8 values to sum. Using the maximum number of calculators and cashiers
   possible per second (it is fewer than 8 now), this will take 3 more seconds,
   for a total of 33 seconds.

3. The situation is similar to the one before, but we always have a surplus of
   cashiers and calculators. Each second, the number of values left to sum is
   halved, so this will take the employees 8 seconds to sum

4. In the general case, it will take the ceiling of the base 2 logarithm of N
   seconds to count N values.
   Code for the plot is in P5.py.

5. There needs to be one second of communication after each iteration of
   calculation (except for the last), so counting 256 bags would take 15secs
   because each cashier could start off with a pair of bags.

6. There are some assumptions we must make about the scenario, which will have
   an effect on our final answer. In one scenario, the cashiers must wait for
   all the bags to be distributed before doing calculations or communicating.
   In the other, cashiers can do these actions once they receive a bag, even
   though not all the cashiers have received bags yet. In both scenarios, we
   assume that we cannot give a bag to a cashier who already has a bag.
   For the former scenario,
   we can easily count the time as 272 seconds: 256 seconds to hand out bags
   and an additional 16 seconds to sum them (our answer from #5 plus 1).
   In the more realistic case that cashiers can start doing work any time after
   they've received a bag, counting is a bit harder. We see that by the time
   we've distributed the last bag, all of the bags from bag 1 to bag n-2 will
   have been summed to one value, and we are left with that value, the n-1 bag,
   and the nth bag. It will take 4 seconds to sum these three values, so we get
   a total time of 256 + 4 = 260 seconds.
   In the case that we are able to hand 2 bags at a time to a cashier, the
   process becomes much faster. It will take 128 + 15 = 143 seconds to sum all
   the bags, in the case that they are not allowed to do work until all the bags
   have been distributed. If they are allowed to do work from the time they
   receive a bag, they can employ a similar strategy as was used for the
   previous case (handing out 1 bag at a time), and they will have an extra 1
   second of overhead total to sum the bags they start out with, so the total
   time is 128 + 4 + 1 = 133 seconds.
   A perhaps better and more realistic way to do it is to leave all the bags spread
   out and ask the poor employees to take bags at will, which will still be
   faster than having you hand them out, even if we assume a 1 or 2 second
   overhead for each time an employee picks up a bag. Problems arise
   when two cashiers try to reach for the same bag, which analogous to a race
   condition in a parallelized program.
   To avoid this possibility, let's consider the case where anyone is allowed to
   transfer any number of bags, with the constant overhead of 1 second. Under
   these constraints, we will use a divide and conquer strategy to first
   distribute all the bags: we first give all the bags to one cashier, and in
   the following second, that cashier will then give half of those to another
   cashier. Each cashier will repeat this process, giving half of his/her
   current bags to a free cashier, until each cashier only has 2 bags. This part
   of the process will take 8 seconds. From here, we use the same strategy as
   in #5. This part thus takes 15 seconds, giving us a total of
   8 + 15 = 23 seconds.
