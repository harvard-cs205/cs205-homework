# Your answers here.
1. Given that the total number of pennies in each bag is already known, there are a total of 256 numbers to add, so 255 total addition operations. Since each operation takes 1 second, a total of 255 seconds would be necessary for a single cashier to add the totals of 256 bags.

2. With 8 cashiers, each can take on 32 bags to count up, so each would require only 31 seconds to complete their counts. Once this is done, the 8 numbers need to be summed, which can also be slightly parallelized. If the cashiers paired up and one cashier from each pair added the sum of the pair's bags and this process continued until only one cashier remained with one final sum, it would take another 3 seconds to combine all the sums, so 34 seconds in total would be required.

3. With an infinite number of employees but a finite number of bags (256), only a finite subset of employees (256 of them) would actually be useful. If each was assigned a bag and the same strategy as above was used to pair them off and compute the sums in parallel, only log_2(256) = 8 seconds would be required to count up all the bags.

4. Based on the above result, log_2(N) seconds would be required to sum all the N bags by an infinite number of employees. Be sure to round the number up to account for the extra step required if the total number of bags is not an exact power of 2. So ceil(log_2(N)) seconds are required. This is reflected in the included graph.

5. At every step of the way, before every computation is made, one instance of communication must take place. So every summation will now take 2 seconds (1 for communication and 1 for summation) such that the total time will now be 2*log_2(256) = 2*8 = 16 seconds to compute all bags.

6. If each cashier takes 1 bag from you, an extra 256 seconds are required for each handoff. Additionally, on top of the summation and communication costs, each operation now has a bag handoff cost. This means that the total time to sum all the bags will be 3*log_2(256) = 3*8 = 24 seconds in addition to the 256 required to collect the bags from you. This results in 256 + 24 = 280 total seconds.
If each cashier takes 2 bags, the first step of the parallelization loses the costs of communication and bag handoff and we have 1 + 3*7 = 1 + 21 = 22 seconds to compute the bags. This is in addition to the 128 seconds required by you to hand off 256 bags in pairs, resulting in a total of 128 + 22 = 150 seconds total, which is much better.
With 4 bags per cashier, each cashier in the first step has to perform 3 seconds of computation, but there are now only 6 steps of computation, communication, and bag handoff, resulting in 3 + 3*6 = 3 + 18 = 21 seconds of total computation in addition to 64 seconds of initial bag handoff. This means that starting with 4 bags allows for a total runtime of 85 seconds.
At x bags, we have x-1 seconds for the first layer and then ceil(log_2(256/x)) more stages at 3 seconds apiece. The initial cost of bag handoff is 256/x, so the total time is (x-1) + 256/x + ceil(log_2(256/x)) seconds. Minimizing this for x yields x = 16 with total time being 35 seconds for the entire computation (A quick Wolfram Alpha query was used for this).