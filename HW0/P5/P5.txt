# Your answers here.

1. It would take 255 seconds, as we need to perform 255 summations.

2. They definitely can verify the total sum faster.  We can split the 256 bags into 8 groups of 32 bags, so it will take us 31 seconds to get 8 sums.

Now, with 8 sums, we have sufficent number of people to handle exactly 2 bags each, so 8 -> 4 -> 2 ->1 takes 3 additional seconds.  

Total time is 34 seconds.  

3. With an infinite number of employees, it will take us 8 seconds.  With an infinite number of employee, we can cut down the number of remaining values to sum up by half each time.  256 = 2^8, so to reach one sum, we need to cut down the sum by half 8 times.

Thus, the total amount of time will be 8 seconds.  

4. If there are N bags, it will take us ceil(log2(N)) seconds as being between powers of 2 simply means we're aren't able to fully utilize a parallel workflow for some of the bags.

The chart plots for N up to 64 in order to illustrate the stepping nature of having infinite number of employees.

Time: ceil(log2(N)) 

5. It takes 1 second to communicate between 1 employees. Everytime we half the workload, one employee must talk to a second employee.  Thus, we add a total of 7 additional seconds (8 times we half the workload, which means 7 transfers) for a total of 15 seconds.

Total: 15 seconds

6.
Assumption: Cashiers can only interact with one action at a time.
If each cashier comes to you and takes 1 bag, we get the following sequence.
G means grab bag from you, C means communicate, S means sum, _k means the specific cashier
(G_0, G_0, (S_0, G_1), G_1, (S_1, G_0), (G_1, S_0). (G_0, S_1), ... )
This takes 256 seconds

When we make the final grab, we have one person with one value and a second person with 2 values.

Thus, we need 3 more seconds (sum, communicate, sum) in order to get the final result.

Thus, the total time is 256 + 3 = 259 seconds 

If each cashier comes to you and takes 2 bags, we get the following sequence.
(G_0, (S_0,G_1), (S_1, G_2), (S_2,G_0), (S_0, G_1), (S_0, S_1, G_2), (S_1,S_2, G_0), (S_0, S_2, G_1), (S_0, S_1, G_2), ... )
This takes 128 seconds.

When we make the final grab, we have person zero with 1 value, person one with 2 values, and  person two with 3 values left. 
Thus, we need one last sequence.  (S_1,S_2), (C_{1,0}, S_2), S_0, C_{2,0}, S_0 which is 5 additional seconds.

The final answer is 128 + 5 = 133.

There is very clearly a better strategy, which again can be solved through a divide and conquer method.  One person comes and takes all 256 bags.  This person (and any subsequent person with more than 2 bags) then hands out exactly half of the number of bags to another person who has no bags until he/she has until she has 2 bags.  

The reason why we take all 256 bags is that we use the fact that the original person with the bags can also perform the summation when he/she has only 2 bags left.  A trick we could have done is take exactly 2/3 of the bags intitially and then have a second person take 1/3 of a bag (leading to 3 people having 1/3 of the bags in 2 seconds) but because 256 is exactly a power of 2 and we can sum only 2 values in one second, this provides no benefit.  If we could sum 3 bags in 1 second, this would have large benefits.

Through this strategy, we take 1 second to grab all the bags and only need to half the number of bags 7 times (128, 64, 32,16,8,4,2) so we add only 8 additional seconds.

Thus the most efficent method requires 15 + 8 = 23 seconds.  
