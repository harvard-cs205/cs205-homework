###############################

# CS 205 Fall 2015 Homework 0 Problem 5
# Submitted by Kendrick Lo (Harvard ID: 70984997)
# Github username: ppgmg

1.  Let N be the number of bags.
	One cashier can only add two bag counts at a time.
    If t_add is the time it takes to add two bags, 
	    then t_add is required to add bags 1 and 2,
        t_add*2 to add bags 1 to 3 (i.e. prior total plus bag 3),
    	t_add*3 to add bags 1 to 4 (i.e. prior total plus bag 4),
        ...
		t_add*(N-1) to add bags 1 to N.
	
	If t_add = 1s and N = 256, then adding all the bags takes
		t_add*(N-1) = 1*(256-1) = 255 seconds. 

2.  Let the number of workers on the counting project be P.
	When we have P>1 workers, we divide and conquer: 
		(1) split the N bags into P parts;
		(2) each worker counts his N/P bags;
		(3) add up all P counts.

	Assuming P divides into N evenly, and that step (1) can be done
	instantaneously, applying the result from question 1 to each
 	individual p, each worker can count his N/P bags in t_add*(N/P - 1) 	time. For t_add = 1s, N = 256, and P = 8, then all workers can finish
	their counts for step (2) in 1*(256/8 - 1) or 31s.

	Note if P does not divide into N evenly, then at least one worker
	will have to count ceil(N/P) bags and workers with fewer bags will,
	at least in the worst-case scenario, need to wait until those with
	more bags have completed their counts. So in the worst-case (which
	assumes that workers with fewer bags do not start adding their own
	totals among themselves), is more generally t_add*(ceil(N/P)-1).)

	Per (3), additional time is needed to add up the remaining P counts.
	We can divide P counts into pairs, and add each pair at the same
 	time. We then repeat this until we have our total.
    	If P=2, this step takes t_add time;
		if P=4, this step takes 2*t_add time;
		if P=8, this step takes 3*t_add time.
	It seems that an added (log P) iterations is required. We can
	actually show that in general, ceil(log P) iterations are required.

	When t_add = 1s and P = 8, we need (log 8)*1 or 3s more.

	Combining this time with the total for (2), it will take
		31 + 3 = 34 seconds 
	for the 8 workers to complete the task.

3.  First, if we can choose any number of P we want, it appears that
	for our particular methodology in question 2, we do not get any
	additional benefits from choosing P > N. If we distributed all N
	bags to P workers, each worker will have a bag and any additional
	workers would not receive one and would be idle. Also, since each
	iteration in (3) is done by at most half the workers simultaneously,
	the additional workers will still be idle. 

	Put another way, it will take the same amount of time for P=N
	workers to complete the task as for P>N workers. Therefore, we need
	only consider completion times for P from 1 to N.

	We noted from question 2 that it takes
		t_add*(ceil(N/P)-1) 
	for all P workers to count their own bags, and then
		t_add*ceil(log P) 
	to total those P counts.
	
	The total time is t_add*(ceil(N/P) + ceil(log P) - 1), and
	we want to determine P where this function is at a minimum.
	Without getting too formal, we tried a few scenarios:
		when P = N = 2^k where k is an integer: 
			total = t_add * (1 + log N - 1) = t_add * k
		when P = N/2: 
			total = t_add * (2 + log N/2 - 1) = t_add * k
		when P = N/4: 
			total = t_add * (4 + log N/4 - 1) = t_add * k + 1
		when P = N/8:
			total = t_add * (8 + log N/8 - 1) = t_add * k + 4
		and the totals keep getting bigger.

	It seems that the fastest we can do this is 
		t_add * k = t_add * log N
	
	which can be achieved with any number of workers from N/2 to N
	inclusive.

	When t_add = 1s and N = 256, the total is 1 * log 256 = 8 seconds. 


