# Your answers here.

Problem 5
   1. 128+64+32+16+8+4+2+1 = 255s
   2. of course it will be faster
      --> 32+4+1 = 37s ==> 6.89x faster
   3. 8s ==> 31.875x faster
   4. P5.py 
   5. need to take one second to move numbers everytime after additions are done
      8 + 7 = 15s
   6. For this case, performance is limited by how many bags can be moved at
      once, like how computing power is limited by memory bandwidth.
      1) if cashier takes 1 bag?
        all computations cannot be done until 256 bags are handed to cashiers.
        After the last bag is moved to a cashier, the last addition can be 
        made. So, I guess it will take 257s (256s + 1s)
      2) if cashier takes 2 bags?
        if 2 bags can be taken by a cashier, performance is going to be 
        increased compared to the first case. it will take 129s(128s + 1s)
      ==> strategy : we need to offer enough nuber of bags that are handed to
                     cashiers so that computing powers cannot be limited. 
