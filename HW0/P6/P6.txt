We see that the results are actually interleaved with each other. This occurs
because we only have four processors, and we're running 10 threads. It would stand
to reason that we are running four of the threads at parallel. While these four threads
print the first line "Hi Job i", at some point, one of these threads finishes, freeing
a processor for the following thread.

Once this processor has been freed, the next thread can start processing. This can,
however, occur before the other three jobs have finished. This means that the results
are not printed in the order we would expect.

As we can see, this affects computations in parallel because we have to consider
the fact that a computation might finish before the computation on another core.
This can lead to what are called "race conditions" in parallel programming where
computations that are supposed to occur one after the other actually occur out of
sequence when we parallelize them.