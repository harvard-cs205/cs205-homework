# Your answers here

If you run the above code a number of times, you may see some unexpected results. Explain these results.  
One strange phenomenon observed was that before Job 0 was finished, Job 1,2,3 began
executing. This is because the processes are executing in parallel.
Also, even though Job 0 began first, 'Bye Job 1' indicates that Job 1 actually ended
first. Even though Job 0 started first, Job 1 may have been given more time by the scheduler to execute its job than the time given to Job 0. 

How could this affect how we program in parallel?
This affects the way we program because many problems will occur if our processes share a resource.

Describe a scenario where this would be important.
For example, if a two processes want to add 1 to a shared variable x only if x==0. Process A checks and sees that x==0, but is interrupted by Process B. B checks x==0 is true and adds one to x. A continues to execute without realizing that B already changed the value of x and thus adds another 1 to x. Now x's value is 2. This could have serious consequences if not noticed.

Try to explain the trend you observe. Is it possible that a parallel program could take longer than itâ€™s serial version? Under what conditions?
From the results and graph provided, we see that serial execution of burntime takes more time than parallel execution. I think this is due to multiple processes calling burnTime in parallel, thus there is no need to wait for one process to finish before processing the next one. Parallel programs could take longer than serial if there is a shared resource. Communication between processes for that resource could result in a longer execution time. 

			---Results---
Serial Results = [2.5987625122070312e-05, 0.012671947479248047, 0.04170989990234375, 0.05911707878112793, 0.1894969940185547, 1.6128921508789062] 

Parallel Results = [0.0009679794311523438, 0.01710677146911621, 0.006604909896850586, 0.011857986450195312, 0.04976081848144531, 0.40621113777160645]

Wait times = [0.000001,0.00001,0.0001,0.001,0.01,0.1]

Ratios = [0.026847290640394088, 0.7407562263940572, 6.314983936757752, 4.985423033617501, 3.8081566943922724, 3.970575892445766]

