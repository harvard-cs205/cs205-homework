# Your answers here

1. The unexpected result that I observed was that some jobs finish faster than others which may be due to the “slower” processes also having some responsibility for running the computer. As a result, the order you submit jobs isn’t necessarily the same order that the jobs are finished. This is really important to keep in mind when programming because we can’t think of completing jobs in a sequential manner. A scenario that comes to mind is when using the Kalman filter as we coded it up in problem 4 of this homework. If we try to scatter the processing of our filtered estimate across processes, we’ll run into trouble because each update step of the Kalman filter relies on the prior step which may or may not have been completed in the multiprocessing chain, causing the estimate to break down.

2.As our wait time increases the time to run to the the parallel program increases relative to the serial program. This is due to the wait time stacking up the flow of jobs getting completed serially while the parallel loop is pushing through multiple jobs at a time despite the longer wait time being enforced.It is possible for a parallel program to take longer to run due to communication overhead when the wait (job) times are small enough to be kept from bogging down the serial program.
