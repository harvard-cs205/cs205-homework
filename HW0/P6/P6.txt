# Your answers here

1. The unexpected result that I observed was that some jobs finish faster than others which may be due to the “slower” processes also having some responsibility for running the computer. As a result, the order you submit jobs isn’t necessarily the same order that the jobs are finished. This is really important to keep in mind when programming because we can’t think of completing jobs in a sequential manner. A scenario that comes to mind is when using the Kalman filter as we coded it up in problem 4 of this homework. If we try to scatter the processing of our filtered estimate across processes, we’ll run into trouble because each update step of the Kalman filter relies on the prior step which may or may not have been completed in the multiprocessing chain, causing the estimate to break down.

2.As our wait time increases the time to run to the the parallel program increases relative to the serial program in a logarithmic manner. This is possibly due to the multiple processors hanging up when waiting to complete the remainder of the jobs while they are simply completed in the serial program. A parallel program can certainly take longer to run than a serial program if the multiple processors are required to communicate with or wait for each other, delaying the completion of jobs that could otherwise be churned through.
