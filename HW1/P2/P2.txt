Partitioning using partitionBy(100) on (i, j) keys immediately before the Mandelbrot calculation results in a very spatially uniform distribution of pixel locations in each partition (see P2a_partitions.png), and thus a very uniform number of interation steps across the partitions (see P2a_hist.png). The partitionBy incurs about 12 seconds of shuffling overhead on my system.
I would expect it to significantly decrease the time spent in the Mandelbrot calculation, because the computation time is much more evenly balanced between partitions, but for some reason the computation phase after the partitionBy takes ~50 seconds, while the default partitioned version takes ~30 seconds for the same computation. I don't know why this version is taking longer despite its demonstrably better load balancing.

In contrast, the default partitioning scheme results in partitions that each cover a contiguous square (see P2a_partitions.png), which results in poor load balancing in which most partitions perform very few iterations but a few perform a very large number of iterations (see P2a_hist.png), because areas near each other are likely to have similar iteration counts.
