The naive partitioning scheme divides the pixels by their location in the image. This is inefficient because some pixels require substantially more computation than others and pixels tend to require a similar amount of computation as their neighbors. In order to alleviate this problem, I partitioned the pixels randomly. Since each partition will likely include a sample of computationally-intensive and cheap pixels, the work should be much more balanced. In the attached histogram, we see that this strategy distributes work among partitions much more evenly than naive method. 

The division of labor is still far from uniform so there is definitely room for further improvement. One strategy would be using an algorithm that could quickly estimate how much work a given pixel would require and then using that to assign work. However, it may be difficult to come up with such an estimation for some problems, and random sampling is quick and easy to implement. 