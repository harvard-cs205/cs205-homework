MULTITHREADING

Running with 1 thread:

4.98833167028 simulation frames per second
4.82090608995 simulation frames per second
4.88935517413 simulation frames per second
4.8519465376 simulation frames per second

Running with 4 threads:

12.9356410604 simulation frames per second
11.3836758954 simulation frames per second
10.6175234662 simulation frames per second
10.3843310465 simulation frames per second
11.5414888377 simulation frames per second

We can clearly see a nice speedup as in this part the threads
are free to do own work without any contention.

SPATIAL DECOMPOSITION

Running with 1 thread:

75.7404473551 simulation frames per second
97.9068271874 simulation frames per second
57.839172604 simulation frames per second
56.2348445743 simulation frames per second

Running with 4 threads:

152.793321393 simulation frames per second
154.430402739 simulation frames per second
241.834061044 simulation frames per second
184.103739748 simulation frames per second

We  see there's a speed-up from 1 to 4 threads and using spatial
decomposition clearly achieves speed up over the pure multi-threading
approach.

SPATIALLY COHERENT SORTING

Running with 1 thread:

231.489699897 simulation frames per second
197.676689603 simulation frames per second
201.449994511 simulation frames per second
225.662485793 simulation frames per second

Running with 4 threads:

384.402464645 simulation frames per second
324.716500686 simulation frames per second
317.15836146 simulation frames per second
494.309577949 simulation frames per second

The sorting improves performance as can be seen in the numbers above
(compared to without sorting). This is because the algorithm now
has more data locality via the Morter ordering, thus more coherent
& efficient memory accesses in collision detection. For this problem
we use the Morton sort order by interleaving bits for each dimension
of the data points.

LOCKING

Running with 1 thread:
199.411331622 simulation frames per second
220.277506433 simulation frames per second
207.854898657 simulation frames per second
178.377284133 simulation frames per second

Running with 4 threads:

264.363552325 simulation frames per second
378.907680868 simulation frames per second
205.950715143 simulation frames per second
287.43071736 simulation frames per second

With locking, we can see that the 4-thread version seems to slow
down slightly, which is due to the threads having to wait for others
before doing work. For the 1-thread variant, we note that locking
does not seem to have much effect, which is due to the fact that
there's only 1 thread running so locking is rendered useless in this
scenario.